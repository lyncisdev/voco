
// Dynamic Rules:
// this file deines the dynamic rules that the parser matches against. Dynamic rules are rules that use variables. For instance, the rule type_character
// looks for a single word that matches the values that the variable character can take on.

// a rule is defined by its signature where the signature is an ordered array of variables. Each variable defined in the signature must be present as a key in the variables dictionary. the value for each key is a dictionary of possible values the variable can take on maped to some useful informationthe can be used by the implantation function when creating the command for this rule.

// a rules context is the application in which it applies. So for example a rule with an Emacs context will not be a possible match if Firefox is the currently selected window. The context "ALL" applies to all windows.
// Context can also be used in the implementation to change behaviour based on the application currently selected e.g. copy works differently in Firefox, the terminal and Emacs. In such a case the rules context should be "all" and the different behaviours should be set in implementation.

// To reduce repeating commonly used variables in the dynamic rules file they are stored in variables.json and referenced here just by their name.

// when the parser is initialised this file is processed and all commonly used variables are replaced by their full definition. The resulting file is stored in [[]]

{
    "SWITCH_APPLICATION": {
        "SIGNATURE": ["APPLICATION"],
        "CONTEXT": "ALL",
        "VARIABLES": {
            "APPLICATION": "APPLICATION"
        }
    },
    "ACTION_PROJECT": {
        "SIGNATURE": ["ACTION", "PROJECT"],
        "CONTEXT": "emacs",
        "VARIABLES": {
            "ACTION": {
                "open": "open",
                "close": "pkill",
                "switch to": "switch"
            },
            "PROJECT": {
                "notes": "notes",
                "voco": "voco"
            }
        }
    },
    "REPEAT_CHARACTER": {
        "SIGNATURE": ["CHARACTER", "REPEAT"],
        "CONTEXT": "ALL",
        "VARIABLES": {
            "CHARACTER": "EDITING",
            "REPEAT": "NUMBER"
        }
    },
    "REPEAT_MOVEMENT": {
        "SIGNATURE": ["MOVEMENT", "REPEAT"],
        "CONTEXT": "ALL",
        "VARIABLES": {
            "MOVEMENT": "MOVEMENT",
            "REPEAT": "NUMBER"
        }
    },
    "TYPE_CHARACTER": {
        "SIGNATURE": ["CHARACTER"],
        "CONTEXT": "ALL",
        "VARIABLES": {
            "CHARACTER": "CHARACTER"
        }
    },
    "TYPE_UPPERCASE_CHARACTER": {
        "SIGNATURE": ["SKY", "LETTER"],
        "CONTEXT": "ALL",
        "VARIABLES": {
            "SKY": {
                "sky": ""
            },
            "LETTER": "LETTER"
        }
    },
    "MODIFIER_SINGLE": {
        "SIGNATURE": ["MODIFIER", "CHARACTER"],
        "CONTEXT": "ALL",
        "VARIABLES": {
            "MODIFIER": "MODIFIER",
            "CHARACTER": "CHARACTER"
        }
    },
    "MODIFIER_DOUBLE": {
        "SIGNATURE": ["MODIFIER", "MODIFIER", "CHARACTER"],
        "CONTEXT": "ALL",
        "VARIABLES": {
            "MODIFIER": "MODIFIER",
            "CHARACTER": "CHARACTER"
        }
    },
    "EMACS_JUMP_LETTER": {
        "SIGNATURE": ["JUMP", "LETTER"],
        "CONTEXT": "EMACS",
        "VARIABLES": {
            "JUMP": {
                "jump": "jump"
            },
            "LETTER": "LETTER"
        }
    },
    "EMACS_JUMP_LINE_2": {
        "SIGNATURE": ["JUMP", "LINE", "LINE"],
        "CONTEXT": "EMACS",
        "VARIABLES": {
            "JUMP": {
                "jump": ""
            },
            "LINE": "NUMBER"
        }
    },
    "EMACS_JUMP_LINE_3": {
        "SIGNATURE": ["JUMP", "LINE", "LINE", "LINE"],
        "CONTEXT": "EMACS",
        "VARIABLES": {
            "JUMP": {
                "jump": ""
            },
            "LINE": "NUMBER"
        }
    },
    "DEFAULT": {
        "SIGNATURE": ["VAR1", "VAR2"],
        "CONTEXT": "ALL",
        "VARIABLES": {
            "VAR1": {
                "opt1": "opt1"
            },
            "VAR2": {
                "opt1": "opt1"
            }
        }
    }
}
